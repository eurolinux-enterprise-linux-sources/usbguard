.TH "USBGUARD\-DAEMON.CONF" "5" "April 2017" "" ""
.SH NAME
.PP
\f[B]usbguard\-daemon.conf\f[] \-\- USBGuard daemon configuration file
.SH DESCRIPTION
.PP
The \f[B]usbguard\-daemon.conf\f[] file is loaded by the USBGuard daemon
after it parses its command\-line options and is used to configure
runtime parameters of the daemon.
The default search path is \f[I]/etc/usbguard/usbguard\-daemon.conf\f[].
It may be overridden using the \f[B]\-c\f[] command\-line option, see
\f[B]usbguard\-daemon\f[](8) for further details.
.SH OPTIONS
.TP
.B \f[B]RuleFile\f[]=<\f[I]path\f[]>
The USBGuard daemon will use this file to load the policy rule set from
it and to write new rules received via the IPC interface.
.RS
.RE
.TP
.B \f[B]ImplicitPolicyTarget\f[]=<\f[I]target\f[]>
How to treat USB devices that don\[aq]t match any rule in the policy.
Target should be one of \f[C]allow\f[], \f[C]block\f[] or
\f[C]reject\f[] (logically remove the device node from the system).
.RS
.RE
.TP
.B \f[B]PresentDevicePolicy\f[]=<\f[I]policy\f[]>
How to treat USB devices that are already connected when the daemon
starts.
Policy should be one of \f[C]allow\f[], \f[C]block\f[], \f[C]reject\f[],
\f[C]keep\f[] (keep whatever state the device is currently in) or
\f[C]apply\-policy\f[] (evaluate the rule set for every present device).
.RS
.RE
.TP
.B \f[B]PresentControllerPolicy\f[]=<\f[I]policy\f[]>
How to treat USB \f[B]controller\f[] devices that are already connected
when the daemon starts.
One of \f[C]allow\f[], \f[C]block\f[], \f[C]reject\f[], \f[C]keep\f[] or
\f[C]apply\-policy\f[].
.RS
.RE
.TP
.B \f[B]InsertedDevicePolicy\f[]=<\f[I]policy\f[]>
How to treat USB devices that are already connected \f[I]after\f[] the
daemon starts.
One of \f[C]block\f[], \f[C]reject\f[], \f[C]apply\-policy\f[].
.RS
.RE
.TP
.B \f[B]RestoreControllerDeviceState\f[]=<\f[I]boolean\f[]>
The USBGuard daemon modifies some attributes of controller devices like
the default authorization state of new child device instances.
Using this setting, you can controll whether the daemon will try to
restore the attribute values to the state before modificaton on
shutdown.
.RS
.RE
.TP
.B \f[B]IPCAllowedUsers\f[]=<\f[I]username\f[]>\ [<\f[I]username\f[]>\ ...]
A space delimited list of usernames that the daemon will accept IPC
connections from.
.RS
.RE
.TP
.B \f[B]IPCAllowedGroups\f[]=<\f[I]groupname\f[]>\ [<\f[I]groupname\f[]>\ ...]
A space delimited list of groupnames that the daemon will accept IPC
connections from.
.RS
.RE
.TP
.B \f[B]IPCAccessControlFiles\f[]=<\f[I]path\f[]>
Path to a directory holding the IPC access control files.
.RS
.RE
.TP
.B \f[B]DeviceManagerBackend\f[]=<\f[I]backend\f[]>
Which device manager backend implementation to use.
Backend should be one of \f[C]uevent\f[] (default) or \f[C]dummy\f[].
.RS
.RE
.TP
.B \f[B]IPCAccessControlFiles\f[]=<\f[I]path\f[]>
The files at this location will be interpreted by the daemon as IPC
access control definition files.
See the \f[B]IPC ACCESS CONTROL\f[] section for more details.
.RS
.RE
.TP
.B \f[B]AuditFilePath\f[]=<\f[I]filepath\f[]>
USBGuard audit events log file path.
.RS
.RE
.SH SECURITY CONSIDERATIONS
.SS IPC
.PP
The daemon provides the USBGuard public IPC interface.
Depending on your distribution defaults, access to this interface is
limited to a certain group or a specific user only.
Please set either the \f[B]IPCAllowedUsers\f[],
\f[B]IPCAllowedGroups\f[] or \f[B]IPCAccessControlFiles\f[] options to
limit access to the IPC interface.
\f[B]Do not leave the ACL unconfigured as that will expose the IPC
interface to all local users and will allow them to manipulate the
authorization state of USB devices and modify the USBGuard policy\f[].
.SS RestoreControllerDeviceState configuration option
.PP
If set to true, the USB authorization policy could be bypassed by
performing some sort of attack on the daemon (via a local exploit or via
a USB device) to make it shutdown and restore to the operating\-system
default state (known to be permissive).
.SH IPC ACCESS CONTROL
.PP
Access to the USBGuard IPC interface can be limited per user or group.
Furthermore, by using the IPC Access Control files, it is possible to
limit the access down to the level of Sections and Privileges as
explained below.
.SS \f[B]Recommended\f[]: \f[B]IPCAccessControlFiles\f[]
.PP
When you set \f[B]IPCAccessControlFiles\f[] option, the daemon will look
for IPC access control files in the directory specified by the setting
value.
Each file in the directory is processed as follows:
.IP "1." 3
The basename of the file is interpreted as an username, UID, groupname
or GID.
If the names starts with \f[C]:\f[] (colon), it is assumed that the rest
of the name represents a group identifier (groupname or GID in case of a
numeric\-only string).
Otherwise, it is interpreted as an user identifier (username or UID in
case of numeric\-only string).
.IP "2." 3
The contents of the file are parsed as
\f[C]Section=privilege\ [privilege\ ...]\f[] formatted lines which
specify the section privileges.
If a section is omitted, it is assumed that no privileges are given for
that section.
.PP
Available sections and privileges:
.IP \[bu] 2
\f[B]Devices\f[]
.RS 2
.IP \[bu] 2
modify: Change authorization state of devices including permanent
changes (i.e.
modification of device specific rules in the policy).
.IP \[bu] 2
list: Ability to get a list of recognized devices and their attributes.
.IP \[bu] 2
listen: Listen to device presence and device policy changes.
.RE
.IP \[bu] 2
\f[B]Policy\f[]
.RS 2
.IP \[bu] 2
modify: Append rules to or remove any rules from the policy.
.IP \[bu] 2
list: Ability to view the currently enforced policy.
.RE
.IP \[bu] 2
\f[B]Exceptions\f[]
.RS 2
.IP \[bu] 2
listen: Receive exception messages.
.RE
.IP \[bu] 2
\f[B]Parameters\f[]
.RS 2
.IP \[bu] 2
modify: Set values of run\-time parameters.
.IP \[bu] 2
list: Get values of run\-time parameters.
.RE
.PP
The following is a generally usable and reasonably safe example of an
access control file.
It allows to modify USB device authorization state
(\f[C]Devices=modify\f[]), list USB devices (\f[C]Devices=list\f[]),
listen to USB device related events (\f[C]Devices=listen\f[]), list USB
authorization policy rules (\f[C]Policy=list\f[]) and listen to
exception events (\f[C]Exceptions=listen\f[]):
.IP
.nf
\f[C]
Devices=modify\ list\ listen
Policy=list
Exceptions=listen
\f[]
.fi
.PP
Instead of creating the access control files by yourself, you can use
the \f[C]usbguard\ add\-user\f[] or \f[C]usbguard\ remove\-user\f[] CLI
commands.
See \f[B]usbguard\f[](1) for more details.
.SS Legacy: \f[B]IPCAllowedUsers\f[] and \f[B]IPCAllowedGroups\f[]
.PP
Example configuration allowing full IPC access to users \f[I]root\f[],
\f[I]joe\f[] and members of the group \f[I]wheel\f[]:
.IP
.nf
\f[C]
IPCAllowedUsers=root\ joe
IPCAllowedGroups=wheel
\f[]
.fi
.SH REPORTING BUGS
.PP
If you find a bug in this software or if you\[aq]d like to request a
feature to be implemented, please file a ticket at
<https://github.com/dkopecek/usbguard/issues/new>.
.SH COPYRIGHT
.PP
Copyright © 2017 Red Hat, Inc.
License GPLv2+: GNU GPL version 2 or later
<http://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
.SH SEE ALSO
.PP
\f[B]usbguard\-daemon\f[](8), \f[B]usbguard\-rules.conf\f[](5)
.SH AUTHORS
Daniel Kopeček <dkopecek@redhat.com>.
